using LightGraphs
# using GR
adjlist = readdlm("data/SNAP_COMMS/Email/email-Eu-core.txt", Int64)
adjlist .+= 1
labels = readdlm("data/SNAP_COMMS/Email/email-Eu-core-department-labels.txt", Int64)
labels .+=1
node_num = length(unique(vec(adjlist)))
dg = DiGraph(node_num)
for i in 1:size(adjlist,1)
    add_edge!(dg, Edge(adjlist[i,1],adjlist[i,2]))
end
##Shoudl figure out who belongs where based the new indices
dg,vlist = induced_subgraph(dg,weakly_connected_components(dg)[1])


for (i,v) in enumerate(vlist)
    labels[labels[:,1] .== v,1] .= i
end
comms = [Int64[] for i in 1:length(unique(labels[:,2]))]
for i in 1:length(comms)
    comms[i] = labels[labels[:,2] .== i,1]
end
####

comm_ind = sortperm([length(c) for c in comms], rev=true)
comms2see = comms[comm_ind[1:20]]

####

for i in 1:length(comms2see)
    comms2see[i] = unique(comms2see[i])
end
graphs = [DiGraph() for i in 1:length(comms2see)]
vlists = [Int64[] for i in 1:length(comms2see)]
for i in 1:length(comms2see)
    graphs[i],vlists[i] = induced_subgraph(dg, comms2see[i])
end

indicesout = sortperm(outdegree(graphs[1]),rev=true)[1:10]
PyPlot.plot(vertices(graphs[1])[1:10], outdegree(graphs[1])[indicesout])
PyPlot.plot(vertices(graphs[1])[1:10], outdegree(dg,vlists[1][indicesout]), color="red")

indicesout = sortperm(outdegree(graphs[5]),rev=true)[1:10]
PyPlot.plot(vertices(graphs[5])[1:10], outdegree(graphs[5])[indicesout])
PyPlot.plot(vertices(graphs[5])[1:10], outdegree(dg,vlists[5][indicesout]), color="red")

PyPlot.svg(true)
indicesout = sortperm(outdegree(graphs[13]),rev=true)[1:10]
PyPlot.plot(vertices(graphs[13])[1:10], outdegree(graphs[13])[indicesout])
PyPlot.plot(vertices(graphs[13])[1:10], outdegree(dg,vlists[13][indicesout]), color="red")

x = Float64[]
for i in vlists[5][indicesout]
    push!(x, degree_centrality(dg)[i])
end
# Plots.plot(vertices(graphs[5])[1:20], degree_centrality(graphs[5])[indicesout])
# Plots.plot!(vertices(graphs[5])[1:20], x, color="red")


# indicesout = sortperm(outdegree(graphs[5]),rev=true)[1:20]
# Plots.plot(vertices(graphs[5])[1:20], outdegree(graphs[5])[indicesout])
# Plots.plot(vertices(graphs[5])[1:20], outdegree(dg)[indicesout])



# intersect(vlists[4], vlists[5])

#####
x = Int64[]
for c in comms2see
    x = vcat(x,c)
end
x = unique(x)
y = Int64[]
for i in 1:length(vlists)
    y = vcat(y,vlists[i])
end
y = unique(y)
gn,vn = induced_subgraph(dg,y)
dg, vlist = induced_subgraph(gn, vertices(gn)[degree(gn) .> 1])


##should remove nodes with degrees less than something for example 5

network = Network(length(vertices(dg)))
for edge in edges(dg)
    network[edge.src, edge.dst] = 1
end

open("./data/truth_comm.txt", "w") do f
  for k in 1:length(comms2see)
    for n in comms2see[k]
        x = findin(vn, n)[1]
        if length(findin(vlist, x)) > 0
            z = findin(vlist, x)[1]
            write(f, "$z ")
        end
        # y = findin(vlist, x)[1]
    end
    write(f, "\n")
  end
end


include("init.jl")
communities
onlyK = length(communities)
EPSILON = 1e-5
minibatchsize = 5
model=LNMMSB(network, onlyK,minibatchsize)
model.mbsize = minibatchsize
model.K = onlyK
mb=deepcopy(model.mb_zeroer)
include("modelutils.jl")
# preparedata2!(model)
# minibatch_set_srns(model)
meth = "isns2"
preparedata(model,true, meth)
# mbsampling!(mb, model, "isns", model.mbsize)
dyads = mbsampling!(mb, model, meth, model.mbsize)
include("trainutils.jl")
##################
g = DiGraph(model.network)
commindx = [18,23,15,9,4,11,19,2,27,22,5,7,29,21,24,20,17,12,14,25,16,28,13,8,10]
comms = model.comm[commindx]
truth_comm = [Int64[] for i in 1:25]
for i in 1:25
    truth_comm[i] =
end

truth_comm[1] = [1,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,78,132,316,399,547,583,619,2,20,38,40,596,597,725,895,980,15,637,628,491,701,298,691,804,331,527,174,803,329,89,88,447,708,736,398,221,434,73,366,580,861,64,383,928,446,306,225,234,236,277,286,325,459,410,496,519,545,582,866,624,648,541,808]
truth_comm[2] = [9,67,22,50,53,70,74,43,44,45,46,47,48,49,51,52,55,57,59,60,61,62,63,64,66,68,69,71,72,73,75,76,77,78,79,81,82,83,84,85,193,324,807,829,929,952,979,54,65,80,56,340,695,703,58,421,639,710,825,545,435,363,532,739,852,881,89,775,516,178,128,375,170,981,169,586,964,219,678,148,940,477,204,258,331,584,684,814,891,894,950,725,632]
truth_comm[3] =[86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,112,172,619,715,105,136,567,171,865,723,770,837,975,456,679,704,919,206,291,945,885,154,355,451,858,517,712,596,697,8,329,850,930,449,201,279,674,744,667,350,671,185,307,128,195,489,542,831,569,897,991]
truth_comm[4]=[12,113,115,116,117,125,126,128,130,137,139,141,144,146,147,150,739,20,149,28,143,71,155,72,118,151,530,541,94,124,520,98,153,106,134,119,120,123,127,129,131,133,135,136,140,142,145,148,152,154,258,266,443,457,114,122,138,937,121,373,973,994,282,659,725,132,385,329,842,350,485,615,318,713,632,169,741,805,358,585,447,372,532,339,855,352,687,863,253,791,695,573,539,225,454,670,990,421,319,363,351,193,199,200,246,920,375,399,411,413,414,429,521,678,628,668,681,696,789,860,901,917,979]
truth_comm[5] =[1,169,179,182,183,191,600,602,3,435,9,160,13,161,163,166,170,175,176,178,186,192,195,588,941,23,180,181,189,373,404,38,196,61,156,158,165,286,67,167,184,743,796,84,168,174,103,831,130,968,154,437,157,159,171,172,173,177,185,187,188,194,164,190,193,470,505,582,818,162,819,757,959,496,780,914,843,383,584,475,279,283,449,469,814,7,465,305,372,340,576,893,559,997,417,732,212,222,236,143,263,599,356,395,443,485,528,678,880,861,864,905,912,983]
truth_comm[6] =[53,197,204,208,209,212,218,225,226,227,228,229,378,528,71,110,206,114,217,162,199,200,216,232,386,684,757,171,202,176,343,186,198,201,203,205,207,210,211,213,214,215,220,221,222,223,230,231,233,235,633,689,974,219,224,351,618,234,958,346,896,945,535,546,717,770,405,503,690,740,792,913,643,741,664,800,910,353,764,308,555,927,932,526,519,695,98,246,297,317,391,427,466,642,683]
truth_comm[7] =[2,259,6,255,535,20,952,33,236,237,239,243,244,250,254,257,260,266,267,268,271,272,273,300,446,496,547,81,135,240,251,263,269,276,106,246,379,249,140,274,277,168,238,258,275,171,245,256,532,851,202,241,261,601,242,253,270,247,252,262,264,265,421,646,248,624,529,128,278,298,520,683,885,950,366,370,524,185,611,943,984,714,676,459,488,890,807,9,739,454,514,24,470,448,701,525,941,325,515,545,630,656,700]
truth_comm[8] =[47,54,279,281,283,287,288,289,290,291,292,293,302,304,307,309,310,311,312,314,295,440,116,296,303,315,316,141,317,147,150,297,306,181,193,201,236,301,895,262,278,280,282,284,285,298,299,305,308,313,318,541,690,286,294,300,319,788,905,972,345,516,829,930,724,869,453,584,25,539,346,843,264,928,191,89,255,412,615,212,331,966,450,152,683,184,704,840,722,348,373,425,547,673,933,949]
truth_comm[9] =[31,356,59,595,61,323,327,329,330,334,335,337,340,346,352,358,359,360,361,364,473,928,71,338,342,87,328,336,339,341,349,363,901,987,88,350,281,322,324,331,351,353,292,320,301,326,348,354,321,325,332,333,344,347,355,357,362,639,667,738,957,398,536,864,886,345,551,910,365,858,343,463,457,873,601,280,693,984,477,541,706,823,495,972,916,545,378,451,535,715,182,583,860,1000]
truth_comm[10] =[9,398,405,416,607,940,15,387,23,410,27,401,404,71,233,380,386,838,891,101,396,140,298,367,369,374,376,381,390,392,403,408,412,415,442,688,727,146,365,366,372,377,379,393,394,399,186,373,375,385,402,406,471,787,250,389,407,947,280,368,378,400,414,477,282,395,582,409,300,345,397,460,339,388,439,340,722,359,370,371,382,383,384,391,413,612,411,853,422,775,216,473,805,586,907,611,60,517,971,905,152,209,24,730,596,885,837,351,481,456,563,575,585,674,695,646,901,103]
truth_comm[11] =[15,432,439,445,644,20,438,101,410,103,417,420,134,446,145,419,150,165,422,427,428,433,452,197,207,425,431,437,836,236,436,265,442,444,268,303,418,421,426,441,443,448,372,391,449,434,423,424,429,430,440,447,450,451,824,966,856,933,848,435,681,694,700,850,894,17,906,732,146,796,775,825,71,804,957,98,68,691,457,459,466,600,803,971]
truth_comm[12] =[24,458,463,465,472,475,478,480,482,487,516,86,595,95,454,477,98,489,102,114,471,479,118,461,467,484,486,167,453,455,457,462,466,469,473,490,176,459,269,325,808,346,464,353,370,474,483,434,456,460,468,470,481,485,488,519,630,675,714,763,929,476,567,738,984,665,493,986,741,941,697,553,563,140,873,995,981,909,22,891,962,286,676,236,876,502,792,887,906,411,973]
truth_comm[13] =[3,513,9,507,85,519,112,502,512,152,351,497,510,708,190,185,254,491,492,493,495,496,503,504,505,509,514,515,517,524,525,199,201,494,498,520,521,522,694,499,506,511,240,523,244,501,280,516,329,372,426,438,518,704,814,903,500,508,554,624,989,431,823,876,930,987,995,585,579,894,79,34,646,539,851,964,168,245,603,724,777,319]
truth_comm[14] =[60,215,549,89,527,537,539,544,547,591,101,212,425,521,531,534,536,548,550,134,148,184,538,201,540,526,530,546,552,729,255,318,532,325,533,541,542,551,528,535,861,443,477,483,543,545,736,901,529,932,933,691,722,675,839,943,767,1000,813,595,873,579,246,739,831,630,814,829,865,950]
truth_comm[15] =[11,553,138,149,560,567,555,556,558,559,561,562,564,565,566,571,575,584,585,839,841,218,554,568,570,574,576,579,586,589,630,843,220,352,563,577,587,298,582,310,320,324,337,355,557,393,428,588,450,458,510,569,572,573,578,580,581,814,583,670,633,948,848,481,695,905,798,966,735,997,59,992,596,612,766,774]
truth_comm[16] =[47,623,56,779,65,594,122,608,610,688,146,618,150,590,182,183,628,201,598,224,292,439,592,601,607,611,234,627,236,248,593,603,604,612,613,630,854,259,391,591,600,605,614,616,621,281,606,615,620,624,625,748,602,622,769,930,411,596,599,626,457,617,460,466,629,865,467,609,487,490,766,535,555,572,595,597,619,892,706,791,728,235,846,934,694,547,528,884,938,529,972,772,540,870,517,792,839]
truth_comm[17] =[15,219,631,633,641,648,649,665,673,687,34,662,58,411,639,644,651,653,657,660,666,667,670,671,672,64,663,674,79,634,636,638,645,659,664,668,669,885,122,658,123,637,650,652,655,896,905,164,204,635,213,642,647,258,563,277,286,391,325,335,86,359,640,654,378,656,632,643,393,394,404,429,516,556,661,646,683,945,24,519,766,904,780,946,688,804,963,339,979,398,754,701,960,962,675,850,803,855]
truth_comm[18] =[6,680,683,845,32,711,33,596,68,681,702,712,102,707,127,690,699,140,150,503,675,676,679,685,691,696,698,700,705,709,710,172,703,714,193,693,694,195,337,686,689,692,363,433,428,677,697,704,135,678,682,684,460,713,576,610,688,630,765,647,894,672,706,687,695,708,940,130,898,568,701,858,987,763,491,536,83,904,914,253,540,583,717,726,835,798,864,947]
truth_comm[19] =[18,235,719,723,725,726,728,735,740,741,742,20,716,733,734,55,234,720,721,65,730,732,736,66,100,743,148,715,175,344,729,177,498,739,226,717,731,744,540,718,727,581,722,943,247,550,738,382,737,434,599,448,489,555,114,610,708,504,815,920,934,724,901,502,88,921,421,945,864,755,855,927,999]
truth_comm[20] =[20,761,22,540,762,770,779,781,33,757,36,371,459,748,750,752,765,768,780,45,747,759,763,778,786,788,55,766,775,782,71,577,708,776,91,756,111,760,122,749,754,764,769,771,783,784,785,134,135,745,152,705,746,777,181,755,250,767,308,325,753,758,789,329,365,774,930,399,404,431,773,787,460,462,521,541,545,563,827,585,751,587,618,629,645,657,347,643,682,902,772,714,717,719,722,724,928,880,879,959,831,291,504,918,387,984,417,10,971]
truth_comm[21] =[53,827,833,55,794,802,825,965,70,835,117,790,800,828,137,806,819,138,318,483,772,791,797,801,803,810,812,815,817,820,822,823,831,834,148,809,190,208,395,630,795,796,811,816,230,231,804,258,830,299,342,490,793,832,325,447,777,813,792,799,805,808,491,624,818,826,829,450,482,824,748,798,814,836,528,558,573,585,717,640,643,821,675,681,695,705,807,980,872,212,285,840,178,27,898,983,877]
truth_comm[22] =[6,863,9,839,842,850,852,874,13,628,868,29,844,848,873,57,837,847,849,851,854,859,862,63,397,865,65,184,533,855,860,866,90,875,94,876,102,869,106,724,128,194,871,134,135,867,872,141,146,830,840,846,152,181,535,870,845,853,857,229,247,838,325,446,861,346,374,841,858,384,585,393,449,646,843,511,523,924,965,545,551,561,856,613,701,970,722,821,864,212,890,950,983,678,966,997]
truth_comm[23] =[3,168,880,882,883,887,892,895,897,898,901,902,906,907,28,34,879,910,54,878,73,912,76,452,913,87,896,94,877,881,889,890,894,106,674,899,112,885,121,300,715,888,904,905,911,916,917,132,149,908,909,903,180,225,884,242,891,247,914,395,429,562,886,447,628,456,541,818,915,556,586,588,635,657,661,893,680,694,700,701,722,727,900,734,748,956,814,858,972,348,393,938,918,324,408,845,47,532,925,954,955,971]
truth_comm[24] =[55,955,56,501,916,918,931,936,944,946,951,954,956,959,963,81,926,98,765,106,941,945,949,158,937,940,947,177,732,919,921,933,943,194,938,197,922,214,962,234,920,961,964,236,934,238,932,249,925,254,296,942,958,960,327,406,953,339,363,927,391,939,321,923,935,957,411,434,448,929,950,464,476,494,495,500,619,519,540,542,600,924,644,672,948,678,703,713,952,738,930,787,789,809,825,877,908,965,966,928,700,154,670,298,365,646,972,260,792,704,837,370,769,17]
truth_comm[25] =[24,986,994,53,991,104,967,141,969,977,978,999,154,995,164,477,975,981,982,985,992,996,168,970,980,169,247,990,268,331,976,340,683,974,399,971,989,997,406,432,979,988,448,464,613,968,490,987,993,485,502,1000,540,983,584,591,630,639,657,678,984,715,911,973,805,831,998,840,860,865,889,934,947,298,972,578,250,722,895]



graphs = [DiGraph() for i in 1:length(comms)]
vlists = [Int64[] for i in 1:length(comms)]
for i in 1:length(comms)
    graphs[i],vlists[i] = induced_subgraph(g, comms[i])
end

indicesout = sortperm(outdegree(graphs[2]),rev=true)[1:10]
Plots.plot(vertices(graphs[2])[1:10], outdegree(graphs[2])[indicesout])
Plots.plot!(vertices(graphs[2])[1:10], outdegree(g,vlists[2][indicesout]), color="red")
gr()
pyplot()
i=6
indicesout = sortperm(outdegree(graphs[i]),rev=true)[1:10]
Plots.plot(vertices(graphs[i])[1:10], outdegree(graphs[i])[indicesout])
Plots.plot!(vertices(graphs[i])[1:10], outdegree(g,vlists[i][indicesout]), color="red")
PyPlot.savefig("Docs/Writeups/Proj1/comm1.png")

# Plots.plot(p1,p2, layout=(2,1))
graphss = [DiGraph() for i in 1:length(truth_comm)]
vlistss= [Int64[] for i in 1:length(truth_comm)]
for i in 1:length(truth_comm)
    graphss[i],vlistss[i] = induced_subgraph(g, truth_comm[i])
end
i=6
indicesout = sortperm(outdegree(graphs[i]),rev=true)[1:10]
Plots.plot!(vertices(graphs[i])[1:10], outdegree(graphs[i])[indicesout], color="green")
 =vlistss[i][indicesout]
Plots.plot(vertices(graphss[i])[1:10], outdegree(graphss[i])[x])

Plots.plot!(vertices(graphss[i])[1:10], outdegree(g,vlistss[i][indicesout]), color="red")
PyPlot.savefig("Docs/Writeups/Proj1/comm1.png")
